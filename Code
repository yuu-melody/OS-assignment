#include<stdio.h>
	#include <stdlib.h>
	#include<unistd.h>
	struct process{
		int prior; //priority
		int b_t; //burst time
		int pid; 
		int w_t; //waiting time
		int ta_t; //turnaround time
		int r_t; //remaining time
		int a_t; //arrival time
	};
	void getInput();
	void calWaitingTime(struct process *q,int);
	void calTurnAroundTime(struct process *q,int);
	void printQueue(struct process *q,int size);
	void RoundRobin();
	void PrioSorting();
	void FCFS();
	void printQueueI(struct process);
	void printQueue(struct process *,int);
	

	/*Queues
	-> Q1 =  Low Prior with FCFS Algorithm
	-> Q2 =  Medium Prior with Prior Based Sorting
	-> Q3 =  High Prior with Round Robin Algorith Quantum Time=4
	*/
	int q1_n=0,q2_n=0,q3_n=0,n=0; //N=Total Process
	struct process *q1,*q2,*q3;
	//Time Quantum
	int time_quantum = 4;
	void getInput(){
		printf("\n Total Number of Process:\t");
		scanf("%d",&n);
		//Allocatig Memory
		q1 = (struct process *)malloc(n*sizeof(struct process));
		q2 = (struct process *)malloc(n*sizeof(struct process));
		q3 = (struct process *)malloc(n*sizeof(struct process));
		int i;
		for(i=0;i<n;i++){
			struct process p;
			printf("\n\t\tProcess %d\n---------------------------------------\n\n",i+1);
			p.a_t = (rand())%(n+1);				
			printf("PId:\t");
			scanf("%d",&p.pid);
			printf("Prior (1-9):\t");
			scanf("%d",&p.prior);
			printf("\nBurst Time: %d\t",p.b_t);
			scanf("%d",&p.b_t);
			p.r_t = p.b_t;
			if(p.prior>0 && p.prior<=3){
				q1[q1_n++]  = p;
			}else if(p.prior>3 && p.prior<=6){
				q2[q2_n++] = p;
			}else{
				q3[q3_n++] = p;
			}		
		}
	}
	void printQueue(struct process *q,int size){	
		calWaitingTime(q,size);
		calTurnAroundTime(q,size);
		printf("\nPId\t\tPrior\t\tBurst Time\t\tWaiting Time\t\tTurnAround Time\t\tArrival");
		printf("\n---------------------------------------\n");
		for(int i=0;i<size;i++){
			printQueueI(q[i]);
		}
		printf("\n\n");
	}
	void printQueueI(struct process p){
		printf("\n%d\t\t%d\t\t\t%d\t\t\t%d\t\t\t%d\t\t%d",p.pid,p.prior,p.b_t,p.w_t,p.ta_t,p.a_t);
	}
	void calWaitingTime(struct process *q,int size){
		q[0].w_t = 0;
		for(int i=1;i<size;i++){
			q[i].w_t = q[i-1].w_t + q[i-1].b_t;
		}
	}
	void calTurnAroundTime(struct process *q,int size){
		q[0].w_t = 0;
		for(int i=0;i<size;i++){
			q[i].ta_t = q[i].w_t + q[i].b_t;
		}
	}
	void RoundRobinAlgo(struct process *q,int size){
		int time=0,i=0,remain=size,flag=0,wait_time=0,tat_time=0,total_times=0;
		for(time=0,i=0;remain!=0;){
			struct process p = q[i];
			if(p.r_t<=time_quantum && p.r_t>0){
				time += p.r_t;
				p.r_t = 0;
				flag = 1;
			}else if(p.r_t>time_quantum){
				p.r_t -= time_quantum;
				time += time_quantum;
			}
			if(p.r_t==0 && flag==1){
				remain--;
				printf("\n%d\t\t%d\t\t\t%d\t\t\t%d\t\t\t%d",p.pid,p.prior,p.b_t,p.w_t,p.ta_t);
				wait_time += time -p.a_t - p.b_t;
				tat_time += time -p.a_t;
				flag = 0;
			}
			
			if(i==remain-1){
				i=0;
			}else if(q[i+1].a_t<time){
				i++;
			}else{
				i=0;
			}
	

			q[i] = p;
		}
		printf("\nAverage Waiting Time= %f\n",wait_time*1.0/n); 
		printf("Avg Turnaround Time = %f\n",tat_time*1.0/n); 	
	}
	void RoundRobin(){
		printf("\n\n---------------------------------------");
		printf("\n\t\tRound Robin\t");
		printf("\n---------------------------------------\n\n");
	

		printf("\nPId\t\tPrior\t\tBurst Time\t\tWaiting Time\t\tTurnAround Time");
		printf("\n---------------------------------------\n");
		calWaitingTime(q3,q3_n);
		calTurnAroundTime(q3,q3_n);
	

		RoundRobinAlgo(q3,q3_n);
	}
	void PrioSortingAlgorithm(struct process *q,int size){
		for(int i=0;i<size;i++){
			for(int j=0;j<size;j++){
				if(q[j].prior>q[i].prior){
					struct process t = q[i];
					q[i] = q[j];
					q[j] = t;
				}
			}
		}
	}
	void PrioSorting(){
		printf("\n\n---------------------------------------");
		printf("\n\t\tPrior Sorting\t");
		printf("\n---------------------------------------\n\n");
		PrioSortingAlgorithm(q2,q2_n);
		printQueue(q2,q2_n);
	}
	void FCFSAlgorithm(struct process *q,int size){
		for(int i=0;i<size;i++){
			for(int j=0;j<size;j++){
				if(q[j].a_t>q[i].a_t){
					struct process t = q[i];
					q[i] = q[j];
					q[j] = t;
				}
			}
		}
	}
	void FCFS(){
		printf("\n\n---------------------------------------");
		printf("\n\t\tFirst Come First Serve\t");
		printf("\n---------------------------------------\n\n");
		FCFSAlgorithm(q1,q1_n);
		printQueue(q1,q1_n);
	}
	int main(){
		getInput();
		int i=1;
		while(n>0){
			switch(i){
				case 3:
					RoundRobin();
					break;
				case 2:
					PrioSorting();
					break;
				case 1:
					FCFS();
					break;
			}
			i++;
			sleep(10);
		}
		printf("\n\n");
	}


